package com.lenovo.greendao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.lenovo.common.entity.JoinLabelAllbumEntity;

import com.lenovo.common.entity.LabelAlbumEntity;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LABEL_ALBUM_ENTITY".
*/
public class LabelAlbumEntityDao extends AbstractDao<LabelAlbumEntity, Long> {

    public static final String TABLENAME = "LABEL_ALBUM_ENTITY";

    /**
     * Properties of entity LabelAlbumEntity.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Alias = new Property(2, String.class, "alias", false, "ALIAS");
        public final static Property Created = new Property(3, long.class, "created", false, "CREATED");
        public final static Property Updated = new Property(4, long.class, "updated", false, "UPDATED");
        public final static Property SortIndex = new Property(5, long.class, "sortIndex", false, "SORT_INDEX");
    };

    private DaoSession daoSession;

    private Query<LabelAlbumEntity> labelEntity_LabelAlbumEntityListQuery;

    public LabelAlbumEntityDao(DaoConfig config) {
        super(config);
    }
    
    public LabelAlbumEntityDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LABEL_ALBUM_ENTITY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"ALIAS\" TEXT," + // 2: alias
                "\"CREATED\" INTEGER NOT NULL ," + // 3: created
                "\"UPDATED\" INTEGER NOT NULL ," + // 4: updated
                "\"SORT_INDEX\" INTEGER NOT NULL );"); // 5: sortIndex
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LABEL_ALBUM_ENTITY\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, LabelAlbumEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(3, alias);
        }
        stmt.bindLong(4, entity.getCreated());
        stmt.bindLong(5, entity.getUpdated());
        stmt.bindLong(6, entity.getSortIndex());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, LabelAlbumEntity entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(3, alias);
        }
        stmt.bindLong(4, entity.getCreated());
        stmt.bindLong(5, entity.getUpdated());
        stmt.bindLong(6, entity.getSortIndex());
    }

    @Override
    protected final void attachEntity(LabelAlbumEntity entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public LabelAlbumEntity readEntity(Cursor cursor, int offset) {
        LabelAlbumEntity entity = new LabelAlbumEntity( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // alias
            cursor.getLong(offset + 3), // created
            cursor.getLong(offset + 4), // updated
            cursor.getLong(offset + 5) // sortIndex
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, LabelAlbumEntity entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setAlias(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setCreated(cursor.getLong(offset + 3));
        entity.setUpdated(cursor.getLong(offset + 4));
        entity.setSortIndex(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(LabelAlbumEntity entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(LabelAlbumEntity entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "labelAlbumEntityList" to-many relationship of LabelEntity. */
    public List<LabelAlbumEntity> _queryLabelEntity_LabelAlbumEntityList(Long labelId) {
        synchronized (this) {
            if (labelEntity_LabelAlbumEntityListQuery == null) {
                QueryBuilder<LabelAlbumEntity> queryBuilder = queryBuilder();
                queryBuilder.join(JoinLabelAllbumEntity.class, JoinLabelAllbumEntityDao.Properties.LabelAlbumId)
                    .where(JoinLabelAllbumEntityDao.Properties.LabelId.eq(labelId));
                labelEntity_LabelAlbumEntityListQuery = queryBuilder.build();
            }
        }
        Query<LabelAlbumEntity> query = labelEntity_LabelAlbumEntityListQuery.forCurrentThread();
        query.setParameter(0, labelId);
        return query.list();
    }

}
